import { NextRequest, NextResponse } from 'next/server';
import { getUser } from '@/lib/supabase/server';
import { checkUserCredits, deductCredits, saveAnalysis, updateAnalysis } from '@/lib/utils/analysis';
import { dataForSeoClient } from '@/lib/dataforseo/client';

export async function POST(request: NextRequest) {
  try {
    const user = await getUser();
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const body = await request.json();
    const { target, limit, status_codes, include_internal, include_external } = body;

    if (!target) {
      return NextResponse.json({ error: 'Target URL ist erforderlich' }, { status: 400 });
    }

    // Credits pr端fen (2 Credits f端r Broken Links)
    const hasCredits = await checkUserCredits(user.id, 2);
    if (!hasCredits) {
      return NextResponse.json({ error: 'Nicht gen端gend Credits verf端gbar' }, { status: 402 });
    }

    // Analysis-Eintrag erstellen
    const analysisId = await saveAnalysis(
      {
        target,
        limit: parseInt(limit),
        status_codes: status_codes || '4xx,5xx',
        include_internal: include_internal !== false,
        include_external: include_external !== false
      },
      'onpage_broken_links',
      user.id,
      undefined,
      1
    );

    try {
      // DataForSEO OnPage API aufrufen
      const response = await dataForSeoClient.onpage as any).brokenLinksLive([
        {
          target,
          limit: parseInt(limit),
          status_codes: status_codes || '4xx,5xx',
          include_internal: include_internal !== false,
          include_external: include_external !== false
        } as any
      ]);

      if (!response || !response.results || response.results.length === 0) {
        throw new Error('Keine Broken Links Daten erhalten');
      }

      const result = response.results[0];
      
      // Ergebnisse verarbeiten
      const processedResults = result.items?.map((item: any) => ({
        url: item.url || '',
        status_code: item.status_code || 0,
        response_time: item.response_time || 0,
        content_type: item.content_type || '',
        content_length: item.content_length || 0,
        redirect_url: item.redirect_url || '',
        error_message: item.error_message || '',
        first_seen: item.first_seen || '',
        last_seen: item.last_seen || ''
      })).filter((item: any) => item.url && item.status_code >= 400) || [];

      // Nach Status Code sortieren (schlimmste zuerst)
      processedResults.sort((a: any, b: any) => b.status_code - a.status_code);

      // Credits abziehen
      await deductCredits(user.id, 2);

      // Analysis updaten
      await updateAnalysis(analysisId, {
        status: 'completed',
        result: {
          total_broken_links: processedResults.length,
          target,
          status_breakdown: {
            '4xx': processedResults.filter((l: any) => l.status_code >= 400 && l.status_code < 500).length,
            '5xx': processedResults.filter((l: any) => l.status_code >= 500).length
          },
          results: processedResults.slice(0, parseInt(limit))
        }
      });

      return NextResponse.json({
        success: true,
        analysis_id: analysisId,
        results: processedResults.slice(0, parseInt(limit)),
        total_broken_links: processedResults.length
      });

    } catch (error) {
      console.error('DataForSEO API Error:', error);
      
      // Analysis als fehlgeschlagen markieren
      await updateAnalysis(analysisId, {
        status: 'failed',
        result: { error: error instanceof Error ? error.message : 'Unbekannter Fehler' }
      });

      return NextResponse.json({ 
        error: 'Fehler bei der Broken Links Analyse',
        details: error instanceof Error ? error.message : 'Unbekannter Fehler'
      }, { status: 500 });
    }

  } catch (error) {
    console.error('Broken Links API Error:', error);
    return NextResponse.json({ 
      error: 'Interner Serverfehler',
      details: error instanceof Error ? error.message : 'Unbekannter Fehler'
    }, { status: 500 });
  }
}

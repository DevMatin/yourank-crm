import { NextRequest, NextResponse } from 'next/server';
import { createServerSupabaseClient } from '@/lib/supabase/server';
import { dataForSeoClient } from '@/lib/dataforseo/client';
import { checkUserCredits, deductCredits, saveAnalysis, updateAnalysis } from '@/lib/utils/analysis';
import { logger } from '@/lib/logger';

export async function POST(request: NextRequest) {
  try {
    const supabase = await createServerSupabaseClient();
    
    // Get user from session
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    
    if (authError || !user) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    const body = await request.json();
    const { domain, location = 'Germany', language = 'German', limit = 100 } = body;

    // Validate input
    if (!domain || typeof domain !== 'string') {
      return NextResponse.json(
        { error: 'Domain is required' },
        { status: 400 }
      );
    }

    // Normalize domain
    const normalizedDomain = domain
      .toLowerCase()
      .replace(/^https?:\/\//, '')
      .replace(/^www\./, '')
      .replace(/\/$/, '');

    // Check credits
    const requiredCredits = 2;
    await checkUserCredits(user.id, requiredCredits);

    // Save analysis record
    const analysisRecord = await saveAnalysis(
      { domain: normalizedDomain, location, language, limit },
      'domain_ranked_keywords',
      user.id,
      null,
      requiredCredits
    );

    try {
      // Create DataForSEO request
      const request = new DomainAnalyticsRankedKeywordsLiveRequestInfo();
      request.target = normalizedDomain;
      request.location_name = location;
      request.language_name = language;
      request.limit = Math.min(limit, 1000); // Max 1000 results

      // Call DataForSEO API
      const result = await dataForSeoClient.domain as any).rankedKeywordsLive([request]);

      // Process results
      const taskResult = result.tasks?.[0]?.result?.[0];
      
      if (!taskResult) {
        throw new Error('No results returned from DataForSEO');
      }

      const keywords = taskResult.organic_keywords || [];
      const totalTraffic = keywords.reduce((sum: number, k: any) => sum + (k.search_volume || 0), 0);
      const avgPosition = keywords.length > 0 
        ? keywords.reduce((sum: number, k: any) => sum + (k.position || 0), 0) / keywords.length 
        : 0;

      // Calculate position distribution
      const positionRanges = [
        { range: 'Position 1-3', min: 1, max: 3 },
        { range: 'Position 4-10', min: 4, max: 10 },
        { range: 'Position 11-20', min: 11, max: 20 },
        { range: 'Position 21-50', min: 21, max: 50 },
        { range: 'Position 51-100', min: 51, max: 100 }
      ];

      const positionDistribution = positionRanges.map(range => {
        const count = keywords.filter((k: any) => k.position >= range.min && k.position <= range.max).length;
        return {
          range: range.range,
          count,
          percentage: keywords.length > 0 ? Math.round((count / keywords.length) * 100) : 0
        };
      });

      const processedResult = {
        domain: normalizedDomain,
        total_keywords: keywords.length,
        total_traffic: totalTraffic,
        avg_position: avgPosition,
        keywords: keywords.map((keyword: any) => ({
          keyword: keyword.keyword,
          position: keyword.position || 0,
          search_volume: keyword.search_volume || 0,
          cpc: keyword.cpc || 0,
          url: keyword.url || '',
          traffic_share: keyword.traffic_share || 0,
          keyword_difficulty: keyword.keyword_difficulty || 0,
          serp_features: keyword.serp_features || [],
          last_updated: keyword.last_updated || new Date().toISOString()
        })),
        position_distribution: positionDistribution,
        traffic_distribution: [] // Could be calculated from keywords data
      };

      // Update analysis with results
      await updateAnalysis(analysisRecord.id, {
        status: 'completed',
        result: processedResult
      });

      // Deduct credits
      await deductCredits(user.id, requiredCredits);

      return NextResponse.json({
        success: true,
        data: processedResult,
        analysisId: analysisRecord.id,
        creditsUsed: requiredCredits
      });

    } catch (apiError) {
      logger.error('DataForSEO API Error:', apiError);
      
      // Update analysis with error
      await updateAnalysis(analysisRecord.id, {
        status: 'failed',
        result: { error: 'API call failed' }
      });

      return NextResponse.json(
        { 
          error: 'Failed to fetch ranked keywords. Please try again.',
          success: false 
        },
        { status: 500 }
      );
    }

  } catch (error) {
    logger.error('Ranked Keywords API Error:', error);
    
    if (error instanceof Error && error.message.includes('Insufficient credits')) {
      return NextResponse.json(
        { error: error.message },
        { status: 402 }
      );
    }
    
    return NextResponse.json(
      { 
        error: error instanceof Error ? error.message : 'Internal server error',
        success: false 
      },
      { status: 500 }
    );
  }
}
